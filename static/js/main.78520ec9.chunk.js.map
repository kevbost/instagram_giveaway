{"version":3,"sources":["utils/GlobalStyle.js","utils/copyToClipboard.js","components/CodeContainer.js","App.js","serviceWorker.js","index.js"],"names":["rebootCss","reboot","black","fontFamilyBase","fontFamilyMonospace","fontSizeBase","fontWeightBase","lineHeightBase","bodyColor","bodyBg","headingsMarginBottom","paragraphMarginBottom","labelMarginBottom","dtFontWeight","linkColor","linkDecoration","linkHoverColor","linkHoverDecoration","tableCellPadding","textMuted","GlobalStyle","createGlobalStyle","_templateObject","copyToClipboard","gistPath","fetch","then","file","text","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","StyledPre","styled","Highlight","CodeContainer_templateObject","Gist","props","react_default","a","className","gistCode","StyledBox","Box","_templateObject2","StyledCard","_templateObject3","CopyButton","Text","_templateObject4","copied","CodeContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autobind","assertThisInitialized","state","setState","_this2","Fragment","margin","textAlign","rebass_dist","mb","width","p","marginTop","CodeContainer_Gist","onClick","handleCopy","React","Component","App","utils_GlobalStyle","components_CodeContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yWAKA,IAuBMA,QAAYC,GAvBF,CACdC,MAAO,OACPC,eACE,2KACFC,oBACE,uFACFC,aAAc,OACdC,eAAgB,IAChBC,eAAgB,IAChBC,UAAW,UACXC,OAAQ,OACRC,qBAAsB,SACtBC,sBAAuB,OACvBC,kBAAmB,SACnBC,aAAc,IACdC,UAAW,UACXC,eAAgB,OAChBC,eAAgB,UAChBC,oBAAqB,YACrBC,iBAAkB,UAClBC,UAAW,YAUEC,EALKC,4BAAHC,IACbtB,kBCPWuB,EAxBS,SAAEC,GACxBC,MAAOD,GACJE,KAAM,SAAEC,GAAY,OAAOA,EAAKC,SAChCF,KAAM,SAAAE,GACL,IAAMC,EAAKC,SAASC,cAAe,YACnCF,EAAGG,MAAQJ,EACXC,EAAGI,aAAc,WAAY,IAC7BJ,EAAGK,MAAMC,SAAW,WACpBN,EAAGK,MAAME,KAAO,UAChBN,SAASO,KAAKC,YAAaT,GAC3B,IAAMU,EACNT,SAASU,eAAeC,WAAa,GACjCX,SAASU,eAAeE,WAAY,GAExCb,EAAGc,SACHb,SAASc,YAAa,QACtBd,SAASO,KAAKQ,YAAahB,GACtBU,IACHT,SAASU,eAAeM,kBACxBhB,SAASU,eAAeO,SAAUR,o3BCV1C,IAAMf,EAAW,kFAGXwB,EAAYC,kBAAOC,IAAPD,CAAHE,KAOTC,EAAO,SAAEC,GACb,OACEC,EAAAC,EAAAxB,cAACiB,EAAD,CAAWQ,UAAU,MAClBH,EAAMI,WASPC,EAAYT,kBAAOU,MAAPV,CAAHW,KAKTC,EAAaZ,kBAAOU,MAAPV,CAAHa,KAQVC,EAAad,kBAAOe,OAAPf,CAAHgB,IAKM,SAAAZ,GAAW,OAAOA,EAAMa,OAAS,MAAQ,YA6FhDC,cA/Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,OACAI,IAASN,OAAAO,EAAA,EAAAP,CAAAD,IACTA,EAAKS,MAAQ,CACXX,QAAQ,EACRT,SAAU,IALAW,4EAcZ,OAJAG,KAAKO,SAAS,CACZZ,QAAQ,IAGH3C,EAAiBC,+CAGN,IAAAuD,EAAAR,KAClB9C,MAAOD,GACJE,KAAM,SAAEC,GAAY,OAAOA,EAAKC,SAChCF,KAAM,SAAAE,GACLmD,EAAKD,SAAS,CACZrB,SAAU7B,uCAMhB,OACE0B,EAAAC,EAAAxB,cAACuB,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAxB,cAAA,MACEG,MAAO,CACL+C,OAAQ,SACRC,UAAW,WAEb,4BACF5B,EAAAC,EAAAxB,cAACoD,EAAA,KAAD,CAAMC,GAAI,GACR9B,EAAAC,EAAAxB,cAAC2B,EAAD,CAAW2B,MAAO,CAAE,EAAG,EAAG,MACxB/B,EAAAC,EAAAxB,cAAC8B,EAAD,CACEyB,EAAG,EACHpD,MAAO,CACLqD,UAAW,IAGbjC,EAAAC,EAAAxB,cAAA,UAAK,gBACLuB,EAAAC,EAAAxB,cAAA,UACEuB,EAAAC,EAAAxB,cAAA,UACG,mCACDuB,EAAAC,EAAAxB,cAAA,UACEuB,EAAAC,EAAAxB,cAAA,UAAK,6BACLuB,EAAAC,EAAAxB,cAAA,UAAK,2BAGTuB,EAAAC,EAAAxB,cAAA,UAAK,0CACLuB,EAAAC,EAAAxB,cAAA,UAAK,qCACLuB,EAAAC,EAAAxB,cAAA,UAAK,OACLuB,EAAAC,EAAAxB,cAAA,UAAK,YAGTuB,EAAAC,EAAAxB,cAAC8B,EAAD,KACEP,EAAAC,EAAAxB,cAACyD,EAAD,CAAM/B,SAAUc,KAAKM,MAAMpB,WAC3BH,EAAAC,EAAAxB,cAACgC,EAAD,CAAY0B,QAASlB,KAAKmB,WAAYxB,OAAQK,KAAKM,MAAMX,QACtDK,KAAKM,MAAMX,OAAS,UAAY,sBAGrCZ,EAAAC,EAAAxB,cAAC8B,EAAD,CAAYyB,EAAG,GACbhC,EAAAC,EAAAxB,cAAA,UAAK,SACLuB,EAAAC,EAAAxB,cAAA,SAAI,mJACJuB,EAAAC,EAAAxB,cAAA,SAAI,4RACJuB,EAAAC,EAAAxB,cAAA,SAAI,qNACJuB,EAAAC,EAAAxB,cAAA,SAAI,iMAvEU4D,IAAMC,WCvCnBC,cAfb,SAAAA,IAAc,IAAAzB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,GACZzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,OACAI,IAASN,OAAAO,EAAA,EAAAP,CAAAD,IAFGA,wEAMZ,OACEd,EAAAC,EAAAxB,cAACuB,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAxB,cAAC+D,EAAD,MACAxC,EAAAC,EAAAxB,cAACgE,EAAD,cAVUH,aCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQhD,EAAAC,EAAAxB,cAACwE,EAAD,MAASzE,SAAS0E,eAAgB,SD+H5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MAAMjF,KAAM,SAAAkF,GAClCA,EAAaC","file":"static/js/main.78520ec9.chunk.js","sourcesContent":["// global-style.js\nimport { createGlobalStyle } from 'styled-components'\nimport reboot from 'styled-reboot'\n\n// Options are, of course, optional, these are the default options\nconst options = {\n  black: '#000',\n  fontFamilyBase:\n    '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"',\n  fontFamilyMonospace:\n    'SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n  fontSizeBase: '1rem',\n  fontWeightBase: 400,\n  lineHeightBase: 1.5,\n  bodyColor: '#212529',\n  bodyBg: '#fff',\n  headingsMarginBottom: '0.5rem',\n  paragraphMarginBottom: '1rem',\n  labelMarginBottom: '0.5rem',\n  dtFontWeight: 700,\n  linkColor: '#007bff',\n  linkDecoration: 'none',\n  linkHoverColor: '#0056b3',\n  linkHoverDecoration: 'underline',\n  tableCellPadding: '0.75rem',\n  textMuted: '#6c757d'\n}\n\nconst rebootCss = reboot( options )\n\nconst GlobalStyle = createGlobalStyle`\n  ${rebootCss}\n  /* other styles */\n`\n\nexport default GlobalStyle\n","const copyToClipboard = ( gistPath ) => {\n  fetch( gistPath )\n    .then( ( file ) => { return file.text() })\n    .then( text => {\n      const el = document.createElement( 'textarea' ) // Create a <textarea> element\n      el.value = text // Set its value to the string that you want copied\n      el.setAttribute( 'readonly', '' ) // Make it readonly to be tamper-proof\n      el.style.position = 'absolute'\n      el.style.left = '-9999px' // Move outside the screen to make it invisible\n      document.body.appendChild( el ) // Append the <textarea> element to the HTML document\n      const selected =\n      document.getSelection().rangeCount > 0 // Check if there is any content selected previously\n        ? document.getSelection().getRangeAt( 0 ) // Store selection if found\n        : false // Mark as false to know no selection existed before\n      el.select() // Select the <textarea> content\n      document.execCommand( 'copy' ) // Copy - only works as a result of a user action (e.g. click events)\n      document.body.removeChild( el ) // Remove the <textarea> element\n      if ( selected ) { // If a selection existed before copying\n        document.getSelection().removeAllRanges() // Unselect everything on the HTML document\n        document.getSelection().addRange( selected ) // Restore the original selection\n      }\n    })\n}\n\nexport default copyToClipboard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport autobind from 'react-autobind'\nimport styled from 'styled-components'\nimport { Flex, Box, Text } from 'rebass'\nimport copyToClipboard from '../utils/copyToClipboard'\nimport Highlight from 'react-highlight'\nimport '../../node_modules/highlight.js/styles/github-gist.css'\n\nconst gistPath = 'https://gist.githubusercontent.com/kevbost/3b2806d56dc084e6a4ec9a420cced359/raw'\n\n// eslint-disable-next-line space-in-parens\nconst StyledPre = styled(Highlight)`\n  margin: 0;\n  padding: 1rem;\n  height: 10rem;\n  overflow: auto;\n`\n\nconst Gist = ( props ) => {\n  return (\n    <StyledPre className=\"js\">\n      {props.gistCode}\n    </StyledPre>\n  )\n}\nGist.propTypes = {\n  gistCode: PropTypes.string.isRequired\n}\n\n// eslint-disable-next-line space-in-parens\nconst StyledBox = styled(Box)`\n  margin: 0 auto;\n`\n\n// eslint-disable-next-line space-in-parens\nconst StyledCard = styled(Box)`\n  margin: 2rem auto 0;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 16px rgba(0, 0, 0, 0.25);\n`\n\n// eslint-disable-next-line space-in-parens\nconst CopyButton = styled(Text)`\n  cursor: pointer;\n  text-align: center;\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n  background-color: ${props => { return props.copied ? 'red' : '#75AADA' }};\n  transition: background-color ease-out 0.25s, color ease-out 0.25s;\n  user-select: none;\n  font-size: 20px;\n  padding: 10px;\n  font-weight: bold;\n  color: white;\n\n  &:active {\n    background-color: blue;\n  }\n`\n\nclass CodeContainer extends React.Component {\n  constructor() {\n    super()\n    autobind( this )\n    this.state = {\n      copied: false,\n      gistCode: ''\n    }\n  }\n\n  handleCopy() {\n    this.setState({\n      copied: true\n    })\n\n    return copyToClipboard( gistPath )\n  }\n\n  componentDidMount() {\n    fetch( gistPath )\n      .then( ( file ) => { return file.text() })\n      .then( text => {\n        this.setState({\n          gistCode: text\n        })\n      })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1\n          style={{\n            margin: '2rem 0',\n            textAlign: 'center'\n          }}\n        >{'Instagram Contest Winner'}</h1>\n        <Flex mb={5}>\n          <StyledBox width={[ 1, 1, 3/4 ]}>\n            <StyledCard\n              p={3}\n              style={{\n                marginTop: 0\n              }}\n            >\n              <h2>{'INSTRUCTIONS'}</h2>\n              <ol>\n                <li>\n                  {'Open chrome\\'s javascript console'}\n                  <ul>\n                    <li>{'Windows: Ctrl + Shift + J'}</li>\n                    <li>{'Mac: Cmd + Option + J'}</li>\n                  </ul>\n                </li>\n                <li>{'Copy the code below (click the button)'}</li>\n                <li>{'Paste into the javascript console'}</li>\n                <li>{'???'}</li>\n                <li>{'Profit'}</li>\n              </ol>\n            </StyledCard>\n            <StyledCard>\n              <Gist gistCode={this.state.gistCode} />\n              <CopyButton onClick={this.handleCopy} copied={this.state.copied}>\n                {this.state.copied ? 'Copied!' : 'Copy to clipboard'}\n              </CopyButton>\n            </StyledCard>\n            <StyledCard p={3}>\n              <h2>{'NOTES'}</h2>\n              <p>{'This function should work for any instagram post. Use it by opening Chrome\\'s javascript console and pasting all of this code (see instructions)'}</p>\n              <p>{'All comments are not immediately visible. The code will automatically click the \"show more\" button for you. It could take some time depending on how many comments there are, just wait. Once all comments have been made available, it will then choose a random commenter by username.'}</p>\n              <p>{'Math.random() creates a random number between 0 & 1, multiply that random number by how many comments exist, round that new number down using Math.floor(), return the person at position people[ randomNumber ].'}</p>\n              <p>{'For the sticklers out there, the reason this is so convoluted is for validation and message handling. It\\'s users aren\\'t programmers, instructions are logged if there is an error.'}</p>\n            </StyledCard>\n          </StyledBox>\n        </Flex>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default CodeContainer\n","import React, { Component } from 'react'\nimport autobind from 'react-autobind'\nimport GlobalStyle from './utils/GlobalStyle'\nimport './App.css'\n\nimport CodeContainer from './components/CodeContainer'\n\nclass App extends Component {\n  constructor() {\n    super()\n    autobind( this )\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <GlobalStyle />\n        <CodeContainer />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register( config ) {\n  if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL( process.env.PUBLIC_URL, window.location.href )\n    if ( publicUrl.origin !== window.location.origin ) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener( 'load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if ( isLocalhost ) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker( swUrl, config )\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then( () => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW( swUrl, config )\n      }\n    })\n  }\n}\n\nfunction registerValidSW( swUrl, config ) {\n  navigator.serviceWorker\n    .register( swUrl )\n    .then( registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if ( installingWorker == null ) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if ( installingWorker.state === 'installed' ) {\n            if ( navigator.serviceWorker.controller ) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if ( config && config.onUpdate ) {\n                config.onUpdate( registration )\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log( 'Content is cached for offline use.' )\n\n              // Execute callback\n              if ( config && config.onSuccess ) {\n                config.onSuccess( registration )\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch( error => {\n      console.error( 'Error during service worker registration:', error )\n    })\n}\n\nfunction checkValidServiceWorker( swUrl, config ) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch( swUrl )\n    .then( response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get( 'content-type' )\n      if (\n        response.status === 404 ||\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then( registration => {\n          registration.unregister().then( () => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW( swUrl, config )\n      }\n    })\n    .catch( () => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ( 'serviceWorker' in navigator ) {\n    navigator.serviceWorker.ready.then( registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}